{"version":3,"sources":["assets/attachment.svg","types/messages.ts","fixtures/conversation.ts","hooks/useMessageContext.ts","components/Message/components/DateTime.tsx","components/Message/components/Text.tsx","components/Message/components/Image.tsx","components/Message/components/Attachment.tsx","components/Message/index.tsx","components/Message/TextMessage.tsx","components/Message/ImageMessage.tsx","components/Message/AttachmentMessage.tsx","components/Conversation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MessageContentType","MessageSenderType","sortByCreatedAtInAscendingOrder","id","content","text","contentType","senderType","createdAt","url","file","sort","a","b","MessageContext","createContext","useMessageContext","context","useContext","Object","keys","length","constructor","Error","dayjs","extend","advancedFormat","DateTime","date","unix","dateTime","format","data-testid","Text","className","Image","src","alt","Attachment","download","href","title","logo","Message","props","children","messageProps","Provider","value","TextMessage","ImageMessage","AttachmentMessage","Conversation","messages","map","message","TEXT","key","IMAGE","ATTACHMENT","App","useState","conversationMessages","setConversationMessages","useEffect","conversationData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e13afcf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/attachment.912d47aa.svg\";","export enum MessageContentType {\n  TEXT = 'text',\n  IMAGE = 'image',\n  ATTACHMENT = 'attachment'\n}\n\nenum MessageSenderType {\n  AGENT = 'agent',\n  USER = 'user'\n}\n\ninterface CommonMessage<ContentType extends MessageContentType, ContentKey extends string> {\n  id: string\n  content: { \n    [key in ContentKey]: string\n  }\n  contentType: ContentType[keyof ContentType]\n  senderType: MessageSenderType[keyof MessageSenderType]\n  createdAt: number\n}\n\nexport type TextMessageType = CommonMessage<MessageContentType.TEXT, 'text'>;\n\nexport type ImageMessageType = CommonMessage<MessageContentType.IMAGE, 'url'>;\n\nexport type AttachmentMessageType = CommonMessage<MessageContentType.ATTACHMENT, 'file'>;\n\nexport type MessageType = TextMessageType | ImageMessageType | AttachmentMessageType;","import { MessageType } from '../types/messages';\n\n/**\n * `id` will always be unique\n * `content` simply describes the content of the message\n * `contentType` will be either 'text' | 'image' | 'attachment'\n * `senderType` can either be 'agent' | 'user'\n * `createdAt` will always be a Date and sorted\n */\nconst conversationData: MessageType[] = [\n  {\n    id: '1',\n    content: {\n      text: \"You can't hack the bandwidth without synthesizing the haptic CSS capacitor!\",\n    },\n    contentType: 'text',\n    senderType: 'agent',\n    createdAt: 1603181211,\n  },\n  {\n    id: '2',\n    content: {\n      text: \"transmitting the program won't do anything, we need to quantify the auxiliary JSON driver!\",\n    },\n    contentType: 'text',\n    senderType: 'user',\n    createdAt: 1603181151,\n  },\n  {\n    id: '3',\n    content: {\n      url: 'https://source.unsplash.com/random',\n    },\n    contentType: 'image',\n    senderType: 'user',\n    createdAt: 1603181091,\n  },\n  {\n    id: '4',\n    content: {\n      url: 'https://source.unsplash.com/random',\n    },\n    contentType: 'image',\n    senderType: 'agent',\n    createdAt: 1603181031,\n  },\n  {\n    id: '5',\n    content: {\n      file: 'https://drive.google.com/uc?export=download&id=1ft-mFQ8ER27jBQJrE2SGdaIsKjnl8_cu',\n    },\n    contentType: 'attachment',\n    senderType: 'user',\n    createdAt: 1603180971,\n  },\n];\n\nconst sortByCreatedAtInAscendingOrder = (data: MessageType[]) => data.sort((a, b) => a.createdAt - b.createdAt);\n\nexport default sortByCreatedAtInAscendingOrder(conversationData);\n","import { createContext, useContext } from \"react\";\r\nimport { MessageType } from '../types/messages';\r\n\r\nexport const MessageContext = createContext({} as MessageType);\r\n\r\nconst useMessageContext = () => {\r\n  const context = useContext(MessageContext);\r\n  if (Object.keys(context).length === 0 && context.constructor === Object)\r\n    throw new Error('Message compound components cannot be rendered outside the Message component.');\r\n  \r\n  return context;\r\n};\r\n\r\nexport default useMessageContext;","import React from 'react';\r\nimport dayjs from 'dayjs';\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\r\nimport useMessageContext from '../../../hooks/useMessageContext';\r\n\r\ndayjs.extend(advancedFormat);\r\n\r\nconst DateTime = () => {\r\n  const { createdAt } = useMessageContext();\r\n  const date = dayjs.unix(createdAt);\r\n\r\n  return (\r\n    <time dateTime={date.format('YYYY-MM-DD HH:mm')} data-testid={'datetime'}>\r\n      {date.format('MMM Do h:mm A')}\r\n    </time>\r\n  );\r\n};\r\n\r\nexport default DateTime;","import React from 'react';\r\nimport { TextMessageType } from '../../../types/messages';\r\nimport useMessageContext from '../../../hooks/useMessageContext';\r\n\r\nconst Text = () => {\r\n  const { content: { text } } = useMessageContext() as TextMessageType;\r\n  \r\n  return (\r\n    <span className={'text-message'} data-testid={'text'}>{text}</span>\r\n  );\r\n};\r\n\r\nexport default Text;","import React from 'react';\r\nimport { ImageMessageType } from '../../../types/messages';\r\nimport useMessageContext from '../../../hooks/useMessageContext';\r\n\r\nconst Image = () => {\r\n  const { content: { url } } = useMessageContext() as ImageMessageType;\r\n  \r\n  return (\r\n    <img src={url} className={'image-message'} alt={''} data-testid={'image'} />\r\n  );\r\n};\r\n\r\nexport default Image;","import React from 'react';\r\nimport { AttachmentMessageType } from '../../../types/messages';\r\nimport useMessageContext from '../../../hooks/useMessageContext';\r\nimport logo from '../../../assets/attachment.svg';\r\n\r\nconst Attachment = () => {\r\n  const { content: { file } } = useMessageContext() as AttachmentMessageType;\r\n  \r\n  return (\r\n    <a download href={file} title={'Download attachment'} data-testid={'attachment'}>\r\n      <div className={'attachment-message'}>\r\n        <img src={logo} alt={''} />\r\n        <span>{'Download Attachment'}</span>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Attachment;","import React, { PropsWithChildren } from 'react';\nimport { MessageType } from '../../types/messages';\nimport DateTime from './components/DateTime';\nimport Text from './components/Text';\nimport Image from './components/Image';\nimport Attachment from './components/Attachment';\nimport { MessageContext } from '../../hooks/useMessageContext';\n\ntype MessageProps = MessageType;\n\nconst Message = (props: PropsWithChildren<MessageProps>) => {\n  const { children, ...messageProps } = props;\n  const { senderType } = messageProps;\n\n  return (\n    <MessageContext.Provider value={messageProps}>\n      <div className={`message-container ${senderType}`} data-testid={'message'}>\n        {children}\n        <DateTime />\n      </div>\n    </MessageContext.Provider>\n  );\n};\n\nMessage.Text = Text;\nMessage.Image = Image;\nMessage.Attachment = Attachment;\nMessage.DateTime = DateTime;\n\nexport default Message;","import React from 'react';\r\nimport { TextMessageType } from '../../types/messages';\r\nimport Message from './index';\r\n\r\nconst TextMessage = (props: TextMessageType) => (\r\n  <Message {...props}>\r\n    <Message.Text />\r\n  </Message>\r\n);\r\n\r\nexport default TextMessage;","import React from 'react';\r\nimport { ImageMessageType } from '../../types/messages';\r\nimport Message from './index';\r\n\r\nconst ImageMessage = (props: ImageMessageType) => (\r\n  <Message {...props}>\r\n    <Message.Image />\r\n  </Message>\r\n);\r\n\r\nexport default ImageMessage;","import React from 'react';\r\nimport { AttachmentMessageType } from '../../types/messages';\r\nimport Message from './index';\r\n\r\nconst AttachmentMessage = (props: AttachmentMessageType) => (\r\n  <Message {...props}>\r\n    <Message.Attachment />\r\n  </Message>\r\n);\r\n\r\nexport default AttachmentMessage;","import React from 'react';\r\nimport { MessageContentType, MessageType, TextMessageType, ImageMessageType, AttachmentMessageType } from '../types/messages';\r\nimport TextMessage from './Message/TextMessage';\r\nimport ImageMessage from './Message/ImageMessage';\r\nimport AttachmentMessage from './Message/AttachmentMessage';\r\n\r\ntype ConversationProps = {\r\n  messages: MessageType[]\r\n};\r\n\r\nconst Conversation = (props: ConversationProps) => {\r\n  const { messages } = props;\r\n\r\n  return (\r\n    <div className={'conversation-container glassmorphism'}>\r\n      <div className={'conversation-content'}>\r\n        {messages.map(message => {\r\n          switch (message.contentType) {\r\n            case MessageContentType.TEXT:\r\n              return <TextMessage key={message.id} {...message as TextMessageType} />\r\n            case MessageContentType.IMAGE:\r\n              return <ImageMessage key={message.id} {...message as ImageMessageType} />\r\n            case MessageContentType.ATTACHMENT:\r\n              return <AttachmentMessage key={message.id} {...message as AttachmentMessageType} />\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conversation;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport conversationData from './fixtures/conversation'; // Conversation Data\nimport { MessageType } from './types/messages';\nimport Conversation from './components/Conversation';\n\nconst App = () => {\n  const [conversationMessages, setConversationMessages] = useState([] as MessageType[]);\n\n  useEffect(() => {\n    setConversationMessages(conversationData);\n  }, []);\n\n  return (\n    <div className={'App'}>\n      <h1>{'Generic Message Component Challenge'}</h1>\n      <Conversation messages={conversationMessages} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}